{"ast":null,"code":"import { COLORS, COLORSDARKER, COLORSLIGHTER, SHAPES } from \"./constants\";\nexport class Tetromino {\n  constructor(context) {\n    this.context = context;\n    this.spawn();\n  }\n  spawn() {\n    const typeId = this.randomizeTetrominoType(COLORS.length - 1);\n    this.shape = SHAPES[typeId];\n    this.color = COLORS[typeId];\n    this.colorLighter = COLORSLIGHTER[typeId];\n    this.colorDarker = COLORSDARKER[typeId];\n    this.x = typeId === 4 ? 4 : 3;\n    this.y = 0;\n  }\n  move(t) {\n    this.x = t.x;\n    this.y = t.y;\n    this.shape = t.shape;\n  }\n  draw() {\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.context.fillStyle = this.color;\n          const currentX = this.x + x;\n          const currentY = this.y + y;\n          this.context.fillRect(currentX, currentY, 1, 1);\n          this.add3D(this.context, currentX, currentY);\n        }\n      });\n    });\n  }\n  drawNext(contextNext) {\n    contextNext.clearRect(0, 0, contextNext.canvas.width, contextNext.canvas.height);\n    this.shape.forEach((row, y) => {\n      return row.forEach((value, x) => {\n        if (value > 0) {\n          this.addNextShadow(contextNext, x, y);\n          this.add3D(contextNext, x, y);\n        }\n      });\n    });\n  }\n  addNextShadow(ctx, x, y) {\n    ctx.fillStyle = this.color;\n    ctx.fillRect(x, y, 1.025, 1.025);\n  }\n  add3D(ctx, x, y) {\n    //Darker Color\n    ctx.fillStyle = this.colorDarker;\n    // Vertical\n    ctx.fillRect(x + 0.9, y, 0.1, 1);\n    // Horizontal\n    ctx.fillRect(x, y + 0.9, 1, 0.1);\n    //Darker Color - Inner\n    // Vertical\n    ctx.fillRect(x + 0.65, y + 0.3, 0.05, 0.3);\n    // Horizontal\n    ctx.fillRect(x + 0.3, y + 0.6, 0.4, 0.05);\n    // Lighter Color - Outer\n    ctx.fillStyle = this.colorLighter;\n    // Lighter Color - Inner\n    // Vertical\n    ctx.fillRect(x + 0.3, y + 0.3, 0.05, 0.3);\n    // Horizontal\n    ctx.fillRect(x + 0.3, y + 0.3, 0.4, 0.05);\n    // Lighter Color - Outer\n    // Vertical\n    ctx.fillRect(x, y, 0.05, 1);\n    ctx.fillRect(x, y, 0.1, 0.95);\n    // Horizontal\n    ctx.fillRect(x, y, 1, 0.05);\n    ctx.fillRect(x, y, 0.95, 0.1);\n  }\n  randomizeTetrominoType(noOfTypes) {\n    return Math.floor(Math.random() * noOfTypes + 1);\n  }\n}","map":{"version":3,"names":["COLORS","COLORSDARKER","COLORSLIGHTER","SHAPES","Tetromino","constructor","context","spawn","typeId","randomizeTetrominoType","length","shape","color","colorLighter","colorDarker","x","y","move","t","draw","forEach","row","value","fillStyle","currentX","currentY","fillRect","add3D","drawNext","contextNext","clearRect","canvas","width","height","addNextShadow","ctx","noOfTypes","Math","floor","random"],"sources":["/home/arsenii/TETRIS/src/tetromino.ts"],"sourcesContent":["import { COLORS, COLORSDARKER, COLORSLIGHTER, SHAPES } from \"./constants\";\n\nexport interface ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n}\n\nexport class Tetromino implements ITetromino {\n  x: number;\n  y: number;\n  color: string;\n  shape: number[][];\n  colorLighter: string;\n  colorDarker: string;\n\n  constructor(private context: CanvasRenderingContext2D) {\n    this.spawn();\n  }\n\n  spawn() {\n    const typeId = this.randomizeTetrominoType(COLORS.length - 1);\n    this.shape = SHAPES[typeId];\n    this.color = COLORS[typeId];\n    this.colorLighter = COLORSLIGHTER[typeId];\n    this.colorDarker = COLORSDARKER[typeId];\n    this.x = typeId === 4 ? 4 : 3;\n    this.y = 0;\n  }\n\n  move(t: ITetromino) {\n    this.x = t.x;\n    this.y = t.y;\n    this.shape = t.shape;\n  }\n\n  draw() {\n    this.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.context.fillStyle = this.color;\n          const currentX = this.x + x;\n          const currentY = this.y + y;\n          this.context.fillRect(currentX, currentY, 1, 1);\n          this.add3D(this.context, currentX, currentY);\n        }\n      });\n    });\n  }\n\n  drawNext(contextNext: CanvasRenderingContext2D) {\n    contextNext.clearRect(\n      0,\n      0,\n      contextNext.canvas.width,\n      contextNext.canvas.height\n    );\n    this.shape.forEach((row, y) => {\n      return row.forEach((value, x) => {\n        if (value > 0) {\n          this.addNextShadow(contextNext, x, y);\n          this.add3D(contextNext, x, y);\n        }\n      });\n    });\n  }\n\n  private addNextShadow(\n    ctx: CanvasRenderingContext2D,\n    x: number,\n    y: number\n  ): void {\n    ctx.fillStyle = this.color;\n    ctx.fillRect(x, y, 1.025, 1.025);\n  }\n\n  add3D(ctx: CanvasRenderingContext2D, x: number, y: number): void {\n    //Darker Color\n    ctx.fillStyle = this.colorDarker;\n    // Vertical\n    ctx.fillRect(x + 0.9, y, 0.1, 1);\n    // Horizontal\n    ctx.fillRect(x, y + 0.9, 1, 0.1);\n\n    //Darker Color - Inner\n    // Vertical\n    ctx.fillRect(x + 0.65, y + 0.3, 0.05, 0.3);\n    // Horizontal\n    ctx.fillRect(x + 0.3, y + 0.6, 0.4, 0.05);\n\n    // Lighter Color - Outer\n    ctx.fillStyle = this.colorLighter;\n\n    // Lighter Color - Inner\n    // Vertical\n    ctx.fillRect(x + 0.3, y + 0.3, 0.05, 0.3);\n    // Horizontal\n    ctx.fillRect(x + 0.3, y + 0.3, 0.4, 0.05);\n\n    // Lighter Color - Outer\n    // Vertical\n    ctx.fillRect(x, y, 0.05, 1);\n    ctx.fillRect(x, y, 0.1, 0.95);\n    // Horizontal\n    ctx.fillRect(x, y, 1, 0.05);\n    ctx.fillRect(x, y, 0.95, 0.1);\n  }\n\n  randomizeTetrominoType(noOfTypes: number): number {\n    return Math.floor(Math.random() * noOfTypes + 1)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}