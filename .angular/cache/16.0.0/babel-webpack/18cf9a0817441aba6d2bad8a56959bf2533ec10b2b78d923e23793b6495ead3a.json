{"ast":null,"code":"import { COLS, POINTS, ROWS } from 'src/constants';\nimport * as i0 from \"@angular/core\";\nclass GameService {\n  valid(t, board) {\n    return t.shape.every((row, dy) => {\n      return row.every((value, dx) => {\n        let x = t.x + dx;\n        let y = t.y + dy;\n        return this.isEmpty(value) || this.insideWalls(x) && this.aboveFloor(y) && this.notOccupied(board, x, y);\n      });\n    });\n  }\n  isEmpty(value) {\n    return value === 0;\n  }\n  insideWalls(x) {\n    return x >= 0 && x < COLS;\n  }\n  aboveFloor(y) {\n    return y <= ROWS;\n  }\n  notOccupied(board, x, y) {\n    return board[y] && board[y][x] === 0;\n  }\n  rotate(tetromino) {\n    let p = JSON.parse(JSON.stringify(tetromino));\n    for (let y = 0; y < p.shape.length; y++) {\n      for (let x = 0; x < y; x++) {\n        [p.shape[x][y], p.shape[y][x]] = [p.shape[y][x], p.shape[x][y]];\n      }\n    }\n    p.shape.forEach(row => row.reverse());\n    return p;\n  }\n  getLinesClearedPoints(lines, level) {\n    const lineClearPoints = lines === 1 ? POINTS.SINGLE : lines === 2 ? POINTS.DOUBLE : lines === 3 ? POINTS.TRIPLE : lines === 4 ? POINTS.TETRIS : 0;\n    return (level + 1) * lineClearPoints;\n  }\n}\nGameService.ɵfac = function GameService_Factory(t) {\n  return new (t || GameService)();\n};\nGameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GameService,\n  factory: GameService.ɵfac,\n  providedIn: 'root'\n});\nexport { GameService };","map":{"version":3,"names":["COLS","POINTS","ROWS","GameService","valid","t","board","shape","every","row","dy","value","dx","x","y","isEmpty","insideWalls","aboveFloor","notOccupied","rotate","tetromino","p","JSON","parse","stringify","length","forEach","reverse","getLinesClearedPoints","lines","level","lineClearPoints","SINGLE","DOUBLE","TRIPLE","TETRIS","factory","ɵfac","providedIn"],"sources":["/home/arsenii/TETRIS/src/services/game.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { COLS, POINTS, ROWS } from 'src/constants';\nimport { ITetromino } from 'src/tetromino';\n\n@Injectable({ providedIn: 'root' })\nexport class GameService {\n  valid(t: ITetromino, board: number[][]): boolean {\n    return t.shape.every((row, dy) => {\n      return row.every((value, dx) => {\n        let x = t.x + dx;\n        let y = t.y + dy;\n        return (\n          this.isEmpty(value) ||\n          (this.insideWalls(x) &&\n            this.aboveFloor(y) &&\n            this.notOccupied(board, x, y))\n        );\n      });\n    });\n  }\n\n  isEmpty(value: number): boolean {\n    return value === 0;\n  }\n\n  insideWalls(x: number): boolean {\n    return x >= 0 && x < COLS;\n  }\n\n  aboveFloor(y: number): boolean {\n    return y <= ROWS;\n  }\n\n  notOccupied(board: number[][], x: number, y: number): boolean {\n    return board[y] && board[y][x] === 0;\n  }\n\n  rotate(tetromino: ITetromino) {\n    let p: ITetromino = JSON.parse(JSON.stringify(tetromino));\n    for (let y = 0; y < p.shape.length; y++) {\n      for (let x = 0; x < y; x++) {\n        [p.shape[x][y], p.shape[y][x]] = [p.shape[y][x], p.shape[x][y]];\n      }\n    }\n    p.shape.forEach((row) => row.reverse());\n    return p;\n  }\n\n  getLinesClearedPoints(lines: number, level: number) {\n    const lineClearPoints =\n      lines === 1\n        ? POINTS.SINGLE\n        : lines === 2\n        ? POINTS.DOUBLE\n        : lines === 3\n        ? POINTS.TRIPLE\n        : lines === 4\n        ? POINTS.TETRIS\n        : 0;\n\n    return (level + 1) * lineClearPoints;\n  }\n}\n"],"mappings":"AACA,SAASA,IAAI,EAAEC,MAAM,EAAEC,IAAI,QAAQ,eAAe;;AAGlD,MACaC,WAAW;EACtBC,KAAKA,CAACC,CAAa,EAAEC,KAAiB;IACpC,OAAOD,CAAC,CAACE,KAAK,CAACC,KAAK,CAAC,CAACC,GAAG,EAAEC,EAAE,KAAI;MAC/B,OAAOD,GAAG,CAACD,KAAK,CAAC,CAACG,KAAK,EAAEC,EAAE,KAAI;QAC7B,IAAIC,CAAC,GAAGR,CAAC,CAACQ,CAAC,GAAGD,EAAE;QAChB,IAAIE,CAAC,GAAGT,CAAC,CAACS,CAAC,GAAGJ,EAAE;QAChB,OACE,IAAI,CAACK,OAAO,CAACJ,KAAK,CAAC,IAClB,IAAI,CAACK,WAAW,CAACH,CAAC,CAAC,IAClB,IAAI,CAACI,UAAU,CAACH,CAAC,CAAC,IAClB,IAAI,CAACI,WAAW,CAACZ,KAAK,EAAEO,CAAC,EAAEC,CAAC,CAAE;MAEpC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAC,OAAOA,CAACJ,KAAa;IACnB,OAAOA,KAAK,KAAK,CAAC;EACpB;EAEAK,WAAWA,CAACH,CAAS;IACnB,OAAOA,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGb,IAAI;EAC3B;EAEAiB,UAAUA,CAACH,CAAS;IAClB,OAAOA,CAAC,IAAIZ,IAAI;EAClB;EAEAgB,WAAWA,CAACZ,KAAiB,EAAEO,CAAS,EAAEC,CAAS;IACjD,OAAOR,KAAK,CAACQ,CAAC,CAAC,IAAIR,KAAK,CAACQ,CAAC,CAAC,CAACD,CAAC,CAAC,KAAK,CAAC;EACtC;EAEAM,MAAMA,CAACC,SAAqB;IAC1B,IAAIC,CAAC,GAAeC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,SAAS,CAAC,CAAC;IACzD,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,CAAC,CAACd,KAAK,CAACkB,MAAM,EAAEX,CAAC,EAAE,EAAE;MACvC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;QAC1B,CAACQ,CAAC,CAACd,KAAK,CAACM,CAAC,CAAC,CAACC,CAAC,CAAC,EAAEO,CAAC,CAACd,KAAK,CAACO,CAAC,CAAC,CAACD,CAAC,CAAC,CAAC,GAAG,CAACQ,CAAC,CAACd,KAAK,CAACO,CAAC,CAAC,CAACD,CAAC,CAAC,EAAEQ,CAAC,CAACd,KAAK,CAACM,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;;;IAGnEO,CAAC,CAACd,KAAK,CAACmB,OAAO,CAAEjB,GAAG,IAAKA,GAAG,CAACkB,OAAO,EAAE,CAAC;IACvC,OAAON,CAAC;EACV;EAEAO,qBAAqBA,CAACC,KAAa,EAAEC,KAAa;IAChD,MAAMC,eAAe,GACnBF,KAAK,KAAK,CAAC,GACP5B,MAAM,CAAC+B,MAAM,GACbH,KAAK,KAAK,CAAC,GACX5B,MAAM,CAACgC,MAAM,GACbJ,KAAK,KAAK,CAAC,GACX5B,MAAM,CAACiC,MAAM,GACbL,KAAK,KAAK,CAAC,GACX5B,MAAM,CAACkC,MAAM,GACb,CAAC;IAEP,OAAO,CAACL,KAAK,GAAG,CAAC,IAAIC,eAAe;EACtC;;AAxDW5B,WAAW,C;mBAAXA,WAAW;AAAA;AAAXA,WAAW,C;SAAXA,WAAW;EAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;EAAAC,UAAA,EADE;AAAM;SACnBnC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}