{"ast":null,"code":"import { BLOCK_SIZE, COLORS, COLS, KEY, LEVEL, LINES_PER_LEVEL, POINTS, ROWS } from 'src/constants';\nimport { Tetromino } from 'src/tetromino';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/services/game.service\";\nconst _c0 = [\"board\"];\nconst _c1 = [\"next\"];\nclass BoardComponent {\n  constructor(service) {\n    this.service = service;\n    this.moves = {\n      [KEY.LEFT]: t => ({\n        ...t,\n        x: t.x - 1\n      }),\n      [KEY.RIGHT]: t => ({\n        ...t,\n        x: t.x + 1\n      }),\n      [KEY.DOWN]: t => ({\n        ...t,\n        y: t.y + 1\n      }),\n      [KEY.SPACE]: t => ({\n        ...t,\n        y: t.y + 1\n      }),\n      [KEY.UP]: t => this.service.rotate(t)\n    };\n  }\n  keyEvent(event) {\n    if (this.moves[event.keyCode]) {\n      event.preventDefault();\n      let p = this.moves[event.keyCode](this.tetromino);\n      if (this.service.valid(p, this.board)) {\n        this.tetromino.move(p);\n        if (event.keyCode === KEY.SPACE) {\n          while (this.service.valid(p, this.board)) {\n            this.points += POINTS.HARD_DROP;\n            this.tetromino.move(p);\n            p = this.moves[KEY.SPACE](this.tetromino);\n          }\n        }\n      } else if (this.service.valid(p, this.board)) {\n        this.tetromino.move(p);\n        if (event.keyCode === KEY.DOWN) {\n          this.points += POINTS.SOFT_DROP;\n        }\n      }\n    }\n  }\n  ngOnInit() {\n    this.initBoard();\n    this.initNext();\n    this.resetGame();\n  }\n  initBoard() {\n    this.context = this.canvas.nativeElement.getContext('2d');\n    this.context.canvas.width = COLS * BLOCK_SIZE;\n    this.context.canvas.height = ROWS * BLOCK_SIZE;\n    this.context.scale(BLOCK_SIZE, BLOCK_SIZE);\n  }\n  initNext() {\n    this.contextNext = this.canvasNext.nativeElement.getContext('2d');\n    this.contextNext.canvas.width = 4 * BLOCK_SIZE;\n    this.contextNext.canvas.height = 4 * BLOCK_SIZE;\n    this.contextNext.scale(BLOCK_SIZE, BLOCK_SIZE);\n  }\n  play() {\n    this.gameStarted = true;\n    this.resetGame();\n    this.next = new Tetromino(this.context);\n    this.tetromino = new Tetromino(this.context);\n    this.next.drawNext(this.contextNext);\n    this.time.start = performance.now();\n    if (this.requestId) {\n      cancelAnimationFrame(this.requestId);\n    }\n    this.animate();\n  }\n  resetGame() {\n    this.points = 0;\n    this.lines = 0;\n    this.level = 0;\n    this.board = this.getEmptyBoard();\n    this.time = {\n      start: 0,\n      elapsed: 0,\n      level: LEVEL[this.level]\n    };\n  }\n  getEmptyBoard() {\n    return Array.from({\n      length: ROWS\n    }, () => Array(COLS).fill(0));\n  }\n  animate(now = 0) {\n    this.time.elapsed = now - this.time.start;\n    if (this.time.elapsed > this.time.level) {\n      this.time.start = now;\n      if (!this.drop()) {\n        this.gameOver();\n        return;\n      }\n    }\n    this.draw();\n    const requestId = requestAnimationFrame(this.animate.bind(this));\n  }\n  draw() {\n    this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n    this.tetromino.draw();\n    this.drawBoard();\n  }\n  drawBoard() {\n    this.board.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.context.fillStyle = COLORS[value];\n          this.context.fillRect(x, y, 1, 1);\n          this.tetromino.add3D(this.context, x, y);\n        }\n      });\n    });\n  }\n  drop() {\n    let t = this.moves[KEY.DOWN](this.tetromino);\n    if (this.service.valid(t, this.board)) {\n      this.tetromino.move(t);\n    } else {\n      this.freeze();\n      this.clearLines();\n      if (this.tetromino.y === 0) {\n        this.gameOver();\n        return false;\n      }\n      this.tetromino = this.next;\n      this.next = new Tetromino(this.context);\n      this.next.drawNext(this.contextNext);\n    }\n    return true;\n  }\n  freeze() {\n    this.tetromino.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.board[y + this.tetromino.y][x + this.tetromino.x] = value;\n        }\n      });\n    });\n    this.clearLines();\n  }\n  clearLines() {\n    let lines = 0;\n    this.board.forEach((row, y) => {\n      if (row.every(value => value !== 0)) {\n        lines++;\n        this.board.splice(y, 1);\n        this.board.unshift(Array(COLS).fill(0));\n      }\n    });\n    if (lines > 0) {\n      this.points += this.service.getLinesClearedPoints(lines, this.level);\n      this.lines += lines;\n      if (this.lines >= LINES_PER_LEVEL) {\n        this.level++;\n        this.lines -= LINES_PER_LEVEL;\n        this.time.level = LEVEL[this.level];\n      }\n    }\n  }\n  gameOver() {\n    cancelAnimationFrame(this.requestId);\n    this.context.fillStyle = 'black';\n    this.context.fillRect(1, 3, 8, 1.2);\n    this.context.font = '1px Arial';\n    this.context.fillStyle = 'red';\n    this.context.fillText('GAME OVER', 1.8, 4);\n  }\n}\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.GameService));\n};\nBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"game-board\"]],\n  viewQuery: function BoardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n      i0.ɵɵviewQuery(_c1, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasNext = _t.first);\n    }\n  },\n  hostBindings: function BoardComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function BoardComponent_keydown_HostBindingHandler($event) {\n        return ctx.keyEvent($event);\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  decls: 17,\n  vars: 3,\n  consts: [[1, \"grid\"], [1, \"next\"], [\"next\", \"\"], [1, \"play-button\", 3, \"click\"], [1, \"right-column\"], [1, \"game-board\"], [\"board\", \"\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\")(2, \"h1\");\n      i0.ɵɵtext(3, \"TETRIS\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"p\");\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"p\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"p\");\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"canvas\", 1, 2);\n      i0.ɵɵelementStart(12, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function BoardComponent_Template_button_click_12_listener() {\n        return ctx.play();\n      });\n      i0.ɵɵtext(13, \"Play\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\", 4);\n      i0.ɵɵelement(15, \"canvas\", 5, 6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate1(\"Score: \", ctx.points, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Lines: \", ctx.lines, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Level: \", ctx.level, \"\");\n    }\n  },\n  encapsulation: 2\n});\nexport { BoardComponent };","map":{"version":3,"names":["BLOCK_SIZE","COLORS","COLS","KEY","LEVEL","LINES_PER_LEVEL","POINTS","ROWS","Tetromino","BoardComponent","constructor","service","moves","LEFT","t","x","RIGHT","DOWN","y","SPACE","UP","rotate","keyEvent","event","keyCode","preventDefault","p","tetromino","valid","board","move","points","HARD_DROP","SOFT_DROP","ngOnInit","initBoard","initNext","resetGame","context","canvas","nativeElement","getContext","width","height","scale","contextNext","canvasNext","play","gameStarted","next","drawNext","time","start","performance","now","requestId","cancelAnimationFrame","animate","lines","level","getEmptyBoard","elapsed","Array","from","length","fill","drop","gameOver","draw","requestAnimationFrame","bind","clearRect","drawBoard","forEach","row","value","fillStyle","fillRect","add3D","freeze","clearLines","shape","every","splice","unshift","getLinesClearedPoints","font","fillText","i0","ɵɵdirectiveInject","i1","GameService","selectors","viewQuery","BoardComponent_Query","rf","ctx","$event","ɵɵresolveWindow","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","BoardComponent_Template_button_click_12_listener","ɵɵadvance","ɵɵtextInterpolate1"],"sources":["/home/arsenii/TETRIS/src/app/board/board.component.ts","/home/arsenii/TETRIS/src/app/board/board.component.html"],"sourcesContent":["import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';\nimport {\n  BLOCK_SIZE,\n  COLORS,\n  COLS,\n  KEY,\n  LEVEL,\n  LINES_PER_LEVEL,\n  POINTS,\n  ROWS,\n} from 'src/constants';\nimport { GameService } from 'src/services/game.service';\nimport { ITetromino, Tetromino } from 'src/tetromino';\n\n@Component({\n  selector: 'game-board',\n  templateUrl: './board.component.html',\n})\nexport class BoardComponent {\n  @ViewChild('board', { static: true })\n  canvas: ElementRef<HTMLCanvasElement>;\n\n  @ViewChild('next', { static: true })\n  canvasNext: ElementRef<HTMLCanvasElement>;\n\n  gameStarted: boolean;\n  context: CanvasRenderingContext2D;\n  contextNext: CanvasRenderingContext2D;\n  points: number;\n  lines: number;\n  level: number;\n  tetromino: Tetromino;\n  next: Tetromino;\n  board: number[][];\n  time: { start: number; elapsed: number; level: number };\n  requestId: number;\n\n  constructor(private service: GameService) {}\n\n  moves = {\n    [KEY.LEFT]: (t: ITetromino): ITetromino => ({ ...t, x: t.x - 1 }),\n    [KEY.RIGHT]: (t: ITetromino): ITetromino => ({ ...t, x: t.x + 1 }),\n    [KEY.DOWN]: (t: ITetromino): ITetromino => ({ ...t, y: t.y + 1 }),\n    [KEY.SPACE]: (t: Tetromino): ITetromino => ({ ...t, y: t.y + 1 }),\n    [KEY.UP]: (t: ITetromino): ITetromino => this.service.rotate(t),\n  };\n\n  @HostListener('window:keydown', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    if (this.moves[event.keyCode]) {\n      event.preventDefault();\n      let p = this.moves[event.keyCode](this.tetromino);\n      if (this.service.valid(p, this.board)) {\n        this.tetromino.move(p);\n        if (event.keyCode === KEY.SPACE) {\n          while (this.service.valid(p, this.board)) {\n            this.points += POINTS.HARD_DROP;\n            this.tetromino.move(p);\n            p = this.moves[KEY.SPACE](this.tetromino);\n          }\n        }\n      } else if (this.service.valid(p, this.board)) {\n        this.tetromino.move(p);\n        if (event.keyCode === KEY.DOWN) {\n          this.points += POINTS.SOFT_DROP;\n        }\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.initBoard();\n    this.initNext();\n    this.resetGame();\n  }\n\n  initBoard() {\n    this.context = this.canvas.nativeElement.getContext('2d')!;\n\n    this.context.canvas.width = COLS * BLOCK_SIZE;\n    this.context.canvas.height = ROWS * BLOCK_SIZE;\n\n    this.context.scale(BLOCK_SIZE, BLOCK_SIZE);\n  }\n\n  initNext() {\n    this.contextNext = this.canvasNext.nativeElement.getContext('2d')!;\n\n    this.contextNext.canvas.width = 4 * BLOCK_SIZE;\n    this.contextNext.canvas.height = 4 * BLOCK_SIZE;\n\n    this.contextNext.scale(BLOCK_SIZE, BLOCK_SIZE);\n  }\n\n  play() {\n    this.gameStarted = true;\n    this.resetGame();\n    this.next = new Tetromino(this.context);\n    this.tetromino = new Tetromino(this.context);\n    this.next.drawNext(this.contextNext);\n    this.time.start = performance.now();\n\n    if (this.requestId) {\n      cancelAnimationFrame(this.requestId);\n    }\n\n    this.animate();\n  }\n\n  resetGame() {\n    this.points = 0;\n    this.lines = 0;\n    this.level = 0;\n    this.board = this.getEmptyBoard();\n    this.time = { start: 0, elapsed: 0, level: LEVEL[this.level] };\n  }\n\n  getEmptyBoard(): number[][] {\n    return Array.from({ length: ROWS }, () => Array(COLS).fill(0));\n  }\n\n  animate(now = 0) {\n    this.time.elapsed = now - this.time.start;\n    if (this.time.elapsed > this.time.level) {\n      this.time.start = now;\n      if (!this.drop()) {\n        this.gameOver();\n        return;\n      }\n    }\n    this.draw();\n    const requestId = requestAnimationFrame(this.animate.bind(this));\n  }\n\n  draw() {\n    this.context.clearRect(\n      0,\n      0,\n      this.context.canvas.width,\n      this.context.canvas.height\n    );\n    this.tetromino.draw();\n    this.drawBoard();\n  }\n\n  drawBoard() {\n    this.board.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.context.fillStyle = COLORS[value];\n          this.context.fillRect(x, y, 1, 1);\n          this.tetromino.add3D(this.context, x, y);\n        }\n      });\n    });\n  }\n\n  drop(): boolean {\n    let t = this.moves[KEY.DOWN](this.tetromino);\n    if (this.service.valid(t, this.board)) {\n      this.tetromino.move(t);\n    } else {\n      this.freeze();\n      this.clearLines();\n      if (this.tetromino.y === 0) {\n        this.gameOver();\n        return false;\n      }\n      this.tetromino = this.next;\n      this.next = new Tetromino(this.context);\n      this.next.drawNext(this.contextNext);\n    }\n    return true;\n  }\n\n  freeze() {\n    this.tetromino.shape.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value > 0) {\n          this.board[y + this.tetromino.y][x + this.tetromino.x] = value;\n        }\n      });\n    });\n    this.clearLines();\n  }\n\n  clearLines() {\n    let lines = 0;\n    this.board.forEach((row, y) => {\n      if (row.every((value) => value !== 0)) {\n        lines++;\n        this.board.splice(y, 1);\n        this.board.unshift(Array(COLS).fill(0));\n      }\n    });\n    if (lines > 0) {\n      this.points += this.service.getLinesClearedPoints(lines, this.level);\n      this.lines += lines;\n      if (this.lines >= LINES_PER_LEVEL) {\n        this.level++;\n        this.lines -= LINES_PER_LEVEL;\n        this.time.level = LEVEL[this.level];\n      }\n    }\n  }\n\n  gameOver() {\n    cancelAnimationFrame(this.requestId);\n    this.context.fillStyle = 'black';\n    this.context.fillRect(1, 3, 8, 1.2);\n    this.context.font = '1px Arial';\n    this.context.fillStyle = 'red';\n    this.context.fillText('GAME OVER', 1.8, 4);\n  }\n}\n","<div class=\"grid\">\n  <div>\n    <h1>TETRIS</h1>\n    <p>Score: {{ points }}</p>\n    <p>Lines: {{ lines }}</p>\n    <p>Level: {{ level }}</p>\n    <canvas #next class=\"next\"></canvas>\n    <button (click)=\"play()\" class=\"play-button\">Play</button>\n  </div>\n  <div class=\"right-column\">\n    <canvas #board class=\"game-board\"></canvas>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}